class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    bfs(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
                
    private void bfs(char[][] grid,int x, int y){
        grid[x][y] = '0';
        int rows = grid.length;
        int cols = grid[0].length;
        
        Queue<Integer> queue = new ArrayDeque();
        queue.offer(x * cols + y);
        
        while(!queue.isEmpty()){
            int cur = queue.poll();
            int r = cur / cols;
            int c = cur % cols;
            if(r > 0 && grid[r - 1][c] == '1'){
                queue.offer((r - 1) * cols + c);
                grid[r - 1][c] = '0';
            }
            if(r < rows - 1 && grid[r + 1][c] == '1'){
                queue.offer((r + 1) * cols + c);
                grid[r + 1][c] = '0';
            }
            if(c > 0 && grid[r][c - 1] == '1'){
                queue.offer(r * cols + c - 1);
                grid[r][c - 1] = '0';
            }
            if(c < cols - 1 && grid[r][c + 1] == '1'){
                queue.offer(r * cols + c + 1);
                grid[r][c + 1] = '0';
            }   
        }
    }
}

        // grid[x][y]='0';
        // int n = grid.length;
        // int m = grid[0].length;
        // Queue<Integer> queue = new ArrayDeque<Integer>();  
        // int code = x*m+y;  
        // queue.offer(code);  
        // while(!queue.isEmpty())  
        // {  
        //     code = queue.poll();  
        //     int i = code/m;  
        //     int j = code%m;  
        //     if(i>0 && grid[i-1][j]=='1')    //search upward and mark adjacent '1's as '0'.
        //     {  
        //         queue.offer((i-1)*m+j);  
        //         grid[i-1][j]='0';  
        //     }  
        //     if(i<n-1 && grid[i+1][j]=='1')  //down
        //     {  
        //         queue.offer((i+1)*m+j);  
        //         grid[i+1][j]='0';  
        //     }  
        //     if(j>0 && grid[i][j-1]=='1')  //left
        //     {  
        //         queue.offer(i*m+j-1);  
        //         grid[i][j-1]='0';  
        //     }  
        //     if(j<m-1 && grid[i][j+1]=='1')  //right
        //     {  
        //         queue.offer(i*m+j+1);  
        //         grid[i][j+1]='0';  
        //     }
        // } 
